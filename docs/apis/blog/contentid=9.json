{"status":"success","code":200,"data":{"id":9,"title":"面向对象游戏案例：贪吃蛇","desc":"其实在在编写博客之前对js了解很少，在学校也就学习到对象的处理。在使用vue的时候还是有很多的不懂的，然后根据慕课网的视频教程学习了vue,虽然基本搞懂了，但是遇到些js的更高级的使用还是蒙蒙的，于是通过别的学习资料扩展了一些语法.","content":"## 前言\n\n其实在在编写博客之前对js了解很少，在学校也就学习到对象的处理。在使用vue的时候还是有很多的不懂的，然后根据慕课网的视频教程学习了vue,虽然基本搞懂了，但是遇到些js的更高级的使用还是蒙蒙的，于是通过别的学习资料扩展了一些语法，\n\n#### 游戏演示\n\n游戏操作：鼠标点击或通过键盘上下左右键控制（推荐）\n\n```demo\n<style>\n.content{\n\t\t\tposition: relative;\n\t\t}\n\t\t#map\n\t\t{\n\t\t    width:100%;\n\t\t    height:400px;\n\t\t\tposition:relative;\n\t\t\tbackground:#ccc;\n\t\t\tborder:2px solid #7be2e3;\n\t\t}\n\t\t#start{\n\t\t\tdisplay:inline-block;\n\t\t\tpadding:10px 20px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tposition: absolute;\n\t\t\ttop:50%;\n\t\t\tleft:50%;\n\t\t\ttransform: translate(-50%,-50%);\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t\n\t\t</style>\n\t\t<div class=\"content\">\n\t\t\t<div id=\"map\"></div>\n\t\t\t<sapn id=\"start\">开始游戏</sapn>\n\t\t</div>\n <script>\n\n        // ---------------------Tools--------------------------\n        // 自调用函数传入 window的目的，是让变量名可以被压缩\n        // 在老版本的浏览器中 undefined 可以被重新赋值\n        ;(function (window, undefined) {\n          var Tools = {\n            getRandom: function (min, max) {\n              return Math.floor(Math.random() * (max - min + 1)) +  min;\n            }\n          }\n          // 暴露Tools给window\n          window.Tools = Tools;\n        })(window, undefined)\n\n        // -----------------------Parent-------------------------\n        ;(function (window) {\n          function Parent(options) {\n            options = options || {};\n            this.width = options.width || 20;\n            this.height = options.height || 20;\n          }\n\n          Parent.prototype.test = function () {\n            console.log('test');\n          }\n          window.Parent = Parent;\n        })(window, undefined)\n\n\n        // -----------------------Food---------------------------\n        ;(function (window, undefined) {\n          // 局部作用域\n          var position = 'absolute';\n          // 记录上一次创建的食物，为删除做准备\n          var elements = [];\n          function Food(options) {\n            options = options || {};\n            this.x = options.x || 0;\n            this.y = options.y || 0;\n\n            // 借用构造函数\n            Parent.call(this, options);\n\n            this.color = options.color || '#d0f14c';\n          }\n\n          // 原型继承\n          Food.prototype = new Parent();\n          Food.prototype.constructor = Food;\n\n          // 渲染\n          Food.prototype.render = function (map) {\n            // 删除之前创建的食物\n            remove();\n\n            // 随机设置x和y的值\n            this.x = Tools.getRandom(0, map.offsetWidth/this.width - 1) * this.width;\n            this.y = Tools.getRandom(0, map.offsetHeight/this.height - 1) * this.height;\n\n            // 动态创建div  页面上显示的食物\n            var div = document.createElement('div');\n            map.appendChild(div);\n\n            elements.push(div);\n\n            // 设置div的样式\n            div.style.position = position;\n            div.style.left = this.x + 'px';\n            div.style.top = this.y + 'px';\n            div.style.width = this.width + 'px';\n            div.style.height = this.height + 'px';\n            div.style.backgroundColor = this.color;\n          }\n\n          function remove() {\n            for (var i = elements.length - 1; i >= 0; i--) {\n              // 删除div\n              elements[i].parentNode.removeChild(elements[i]);\n              // 删除数组中的元素\n              // 删除数组元素\n              // 第一个参数，从哪个元素开始删除\n              // 第二个参数，删除几个元素\n              elements.splice(i, 1);\n            }\n          }\n\n          // 把Food构造函数  让外部可以访问\n          window.Food = Food;\n        })(window, undefined)\n\n        // ---------------------------Snake----------------------\n        ;(function (window, undefined) {\n          var position = 'absolute';\n          // 记录之前创建的蛇\n          var elements = [];\n          function Snake(options) {\n            options = options || {};\n\n            // 借用构造函数\n            Parent.call(this, options);\n\n            // 蛇移动的方向\n            this.direction = options.direction || 'right';\n            // 蛇的身体(蛇节)  第一个元素是蛇头\n            this.body = [\n              {x: 3, y: 2, color: '#00dcff'},\n              {x: 2, y: 2, color: '#12ffb2'},\n              {x: 1, y: 2, color: '#12ffb2'}\n            ];\n          }\n\n          Snake.prototype = new Parent();\n          Snake.prototype.constructor = Snake;\n\n          Snake.prototype.render = function (map) {\n            // 删除之前创建的蛇\n            remove();\n            // 把每一个蛇节渲染到地图上\n            for (var i = 0, len = this.body.length; i < len; i++) {\n              // 蛇节\n              var object = this.body[i];\n              // \n              var div = document.createElement('div');\n              map.appendChild(div);\n\n              // 记录当前蛇\n              elements.push(div);\n\n              // 设置样式\n              div.style.position = position;\n              div.style.width = this.width + 'px';\n              div.style.height = this.height + 'px';\n              div.style.left = object.x * this.width + 'px';\n              div.style.top = object.y * this.height + 'px';\n              div.style.backgroundColor = object.color;\n            }\n          }\n          // 私有的成员\n          function remove() {\n            for (var i = elements.length - 1; i >= 0; i--) {\n              // 删除div\n              elements[i].parentNode.removeChild(elements[i]);\n              // 删除数组中的元素\n              elements.splice(i, 1);\n            }\n          }\n\n          // 控制蛇移动的方法\n          Snake.prototype.move = function (food, map) {\n            // 控制蛇的身体移动（当前蛇节 到 上一个蛇节的位置）\n            for (var i = this.body.length - 1; i > 0; i--) {\n              this.body[i].x = this.body[i - 1].x;\n              this.body[i].y = this.body[i - 1].y;\n            }\n            // 控制蛇头的移动\n            // 判断蛇移动的方向\n            var head = this.body[0];\n            switch(this.direction) {\n              case 'right': \n                head.x += 1;\n                break;\n              case 'left': \n                head.x -= 1;\n                break;\n              case 'top':\n                head.y -= 1;\n                break;\n              case 'bottom':\n                head.y += 1;\n                break;\n            }\n\n            // 2.4 判断蛇头是否和食物的坐标重合\n            var headX = head.x * this.width;\n            var headY = head.y * this.height;\n            if (headX === food.x && headY === food.y) {\n              // 让蛇增加一节\n              // 获取蛇的最后一节\n              var last = this.body[this.body.length - 1];\n              this.body.push({\n                x: last.x,\n                y: last.y,\n                color: last.color\n              })\n\n              // 随机在地图上重新生成食物\n              food.render(map);\n            }\n\n          }\n\n          // 暴露构造函数给外部\n          window.Snake = Snake;\n        })(window, undefined)\n\n        //----------------------Game---------------------------\n        ;(function (window, undefined) {\n          var that;  // 记录游戏对象\n          function Game(map) {\n            this.food = new Food();\n            this.snake = new Snake();\n            this.map = map;\n            that = this;\n          }\n\n          Game.prototype.start = function () {\n            // 1 把蛇和食物对象，渲染到地图上\n            this.food.render(this.map);\n            this.snake.render(this.map);\n            // 2 开始游戏的逻辑\n            // 2.1  让蛇移动起来\n            // 2.2  当蛇遇到边界游戏结束\n            runSnake();\n            // 2.3  通过键盘控制蛇移动的方向\n            bindKey();\n            // 2.4  当蛇遇到食物 --- 在snake的move方法中处理  \n           }\n\n           // 通过键盘控制蛇移动的方向\n          function bindKey() {\n            that.map.addEventListener('click',function(e){\n                var headX=that.snake.body[0].x*that.snake.width+that.snake.width/2;\n                var headY=that.snake.body[0].y*that.snake.height+that.snake.height/2;\n                var offsetX=e.offsetX;\n                var offsetY=e.offsetY;\n                var x=offsetX-headX;\n                var y=offsetY-headY;\n                if(x>=0&&y<=0){\n                    if(Math.abs(x)-Math.abs(y)>0){\n                        that.snake.direction='right';\n                    }else{\n                        that.snake.direction='top';\n                    }\n                }else if(x>=0&&y>=0){\n                    if(Math.abs(x)-Math.abs(y)>0){\n                        that.snake.direction='right';\n                    }else{\n                        that.snake.direction='bottom';\n                    }\n                }else if(x<=0&&y>=0){\n                    if(Math.abs(x)-Math.abs(y)>0){\n                        that.snake.direction='left';\n                    }else{\n                        that.snake.direction='bottom';\n                    }\n                }else{\n                    if(Math.abs(x)-Math.abs(y)>0){\n                        that.snake.direction='left';\n                    }else{\n                        that.snake.direction='top';\n                    }\n                }\n            },false)\n            // document.onkeydown = function () {};\n            document.addEventListener('keydown', function (e) {\n              // console.log(e.keyCode);\n              // 37 - left\n              // 38 - top\n              // 39 - right\n              // 40 - bottom\n              switch (e.keyCode) {\n                case 37: \n                  this.snake.direction = 'left';\n                  break;\n                case 38:\n                  this.snake.direction = 'top';\n                  break;\n                case 39:\n                  this.snake.direction = 'right';\n                  break;\n                case 40:\n                  this.snake.direction = 'bottom';\n                  break;\n              }\n            }.bind(that), false);\n          }\n\n           // 私有的函数  让蛇移动\n           function runSnake() {\n             var timerId = setInterval(function () {\n               // 让蛇走一格\n               // 在定时器的function中this是指向window对象的\n               // this.snake\n               // 要获取游戏对象中的蛇属性\n               this.snake.move(this.food, this.map);\n               this.snake.render(this.map);\n\n                // 2.2  当蛇遇到边界游戏结束\n                // 获取蛇头的坐标\n                var maxX = this.map.offsetWidth / this.snake.width;\n                var maxY = this.map.offsetHeight / this.snake.height;\n                var headX = this.snake.body[0].x;\n                var headY = this.snake.body[0].y;\n                var start=document.getElementById('start');\n                if (headX < 0 || headX >= maxX) {\n                    start.innerText=\"游戏结束，得分\"+that.snake.body.length+\"，点击重新开始。\";\n                    start.style.display=\"block\";\n                      clearInterval(timerId);\n                }\n                if (headY < 0 || headY >= maxY) {\n                    start.innerText=\"游戏结束，得分\"+that.snake.body.length+\"，点击重新开始。\";\n                    start.style.display=\"block\";\n                    clearInterval(timerId);\n                }\n             }.bind(that), 150);\n           }\n\n          // 暴露构造函数给外部\n          window.Game = Game;\n        })(window, undefined)\n\n        // -------------------调用------------------\n        ;(function (window, undefined) {\n            var map = document.getElementById('map');\n            var game = new Game(map);\n            var start=document.getElementById('start');\n            start.addEventListener('click',function(){\n                start.style.display=\"none\";\n                game.food=new Food();\n                game.snake=new Snake();\n                game.start();\n            })\n        })(window, undefined)\n        </script>\n\n```\n\n### 功能实现\n\n#### 搭建页面\n\n放一个容器盛放游戏场景 div#map，设置样式\n\n```css\n#map {\n  width: 800px;\n  height: 600px;\n  background-color: #ccc;\n  position: relative;\n}\n```\n\n#### 分析对象\n\n- 游戏对象\n- 蛇对象\n- 食物对象\n\n#### 创建食物对象\n\n- Food\n\n  - 属性\n\n    - x       \n    - y\n    - width\n    - height\n    - color       \n\n  - 方法\n\n    - render       随机创建一个食物对象，并输出到map上\n\n- 创建Food的构造函数，并设置属性\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Food(x, y, width, height, color) {\n  this.x = x || 0;\n  this.y = y || 0;\n  // 食物的宽度和高度(像素)\n  this.width = width || 20;\n  this.height = height || 20;\n  // 食物的颜色\n  this.color = color || 'green';\n}\n```\n\n- 通过原型设置render方法，实现随机产生食物对象，并渲染到map上\n\n```js\nFood.prototype.render = function (map) {\n  // 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度\n  this.x = parseInt(Math.random() * map.offsetWidth / this.width) * this.width;\n  this.y = parseInt(Math.random() * map.offsetHeight / this.height) * this.height;\n\n  // 动态创建食物对应的div\n  var div = document.createElement('div');\n  map.appendChild(div);\n  div.style.position = position;\n  div.style.left = this.x + 'px';\n  div.style.top = this.y + 'px';\n  div.style.width = this.width + 'px';\n  div.style.height = this.height + 'px';\n  div.style.backgroundColor = this.color;\n  elements.push(div);\n}\n```\n\n- 通过自调用函数，进行封装，通过window暴露Food对象\n\n```js\nwindow.Food = Food;\n```\n\n#### 创建蛇对象\n\n\n- Snake\n\n- 属性\n\n  - width    蛇节的宽度 默认20\n  - height   蛇节的高度 默认20\n  - body     数组，蛇的头部和身体，第一个位置是蛇头\n  - direction    蛇运动的方向  默认right  可以是 left  top bottom\n\n- 方法\n\n  - render  把蛇渲染到map上\n\n- Snake构造函数\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Snake(width, height, direction) {\n  // 设置每一个蛇节的宽度\n  this.width = width || 20;\n  this.height = height || 20;\n  // 蛇的每一部分, 第一部分是蛇头\n  this.body = [\n    {x: 3, y: 2, color: 'red'},\n    {x: 2, y: 2, color: 'red'},\n    {x: 1, y: 2, color: 'red'}\n  ];\n  this.direction = direction || 'right';\n}\n```\n\n- render方法\n\n```js\nSnake.prototype.render = function(map) {\n  for(var i = 0; i < this.body.length; i++) {\n    var obj = this.body[i];\n    var div = document.createElement('div');\n    map.appendChild(div);\n    div.style.left = obj.x * this.width + 'px';\n    div.style.top = obj.y * this.height + 'px';\n    div.style.position = position;\n    div.style.backgroundColor = obj.color;\n    div.style.width = this.width + 'px';\n    div.style.height = this.height + 'px';\n  }\n}\n```\n\n- 在自调用函数中暴露Snake对象\n\n```js\nwindow.Snake = Snake;\n```\n\n#### 创建游戏对象\n\n游戏对象，用来管理游戏中的所有对象和开始游戏\n\n- Game\n\n  - 属性\n\n    - food\n\n    - snake\n\n    - map\n\n  - 方法\n\n    - start            开始游戏（绘制所有游戏对象）\n\n\n\n- 构造函数\n\n```js\nfunction Game(map) {\n  this.food = new Food();\n  this.snake = new Snake();\n  this.map = map;\n}\n```\n\n- 开始游戏，渲染食物对象和蛇对象\n\n```js\nGame.prototype.start = function () {\n  this.food.render(this.map);\n  this.snake.render(this.map);\n}\n\n```\n\n### 游戏的逻辑\n\n#### 写蛇的move方法\n\n- 在蛇对象(snake.js)中，在Snake的原型上新增move方法\n\n1. 让蛇移动起来，把蛇身体的每一部分往前移动一下\n2. 蛇头部分根据不同的方向决定 往哪里移动\n\n```js\nSnake.prototype.move = function (food, map) {\n  // 让蛇身体的每一部分往前移动一下\n  var i = this.body.length - 1;\n  for(; i > 0; i--) {\n    this.body[i].x = this.body[i - 1].x;\n    this.body[i].y = this.body[i - 1].y;\n  }\n  // 根据移动的方向，决定蛇头如何处理\n  switch(this.direction) {\n    case 'left': \n      this.body[0].x -= 1;\n      break;\n    case 'right':\n      this.body[0].x += 1;\n      break;\n    case 'top':\n      this.body[0].y -= 1;\n      break;\n    case 'bottom':\n      this.body[0].y += 1;\n      break;\n  }\n}\n\n```\n\n- 在game中测试\n\n```js\nthis.snake.move(this.food, this.map);\nthis.snake.render(this.map);\n\n```\n\n#### 让蛇自己动起来\n\n- 私有方法\n\n  ```\n  什么是私有方法？\n    不能被外部访问的方法\n  如何创建私有方法？\n    使用自调用函数包裹\n  \n  ```\n\n- 在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来\n\n- 判断蛇是否撞墙\n\n```js\nfunction runSnake() {\n  var timerId = setInterval(function() {\n    this.snake.move(this.food, this.map);\n    // 在渲染前，删除之前的蛇\n    this.snake.render(this.map);\n\n    // 判断蛇是否撞墙\n    var maxX = this.map.offsetWidth / this.snake.width;\n    var maxY = this.map.offsetHeight / this.snake.height;\n    var headX = this.snake.body[0].x;\n    var headY = this.snake.body[0].y;\n    if (headX < 0 || headX >= maxX) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n    if (headY < 0 || headY >= maxY) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n  }.bind(that), 150);\n}\n\n```\n\n- 在snake中添加删除蛇的私有方法，在render中调用\n\n```js\nfunction remove() {\n  // 删除渲染的蛇\n  var i = elements.length - 1;\n  for(; i >= 0; i--) {\n    // 删除页面上渲染的蛇\n    elements[i].parentNode.removeChild(elements[i]);\n    // 删除elements数组中的元素\n    elements.splice(i, 1);\n  }\n}\n\n```\n\n- 在game中通过键盘控制蛇的移动方向\n\n```js\nfunction bindKey() {\n  document.addEventListener('keydown', function(e) {\n    switch (e.keyCode) {\n      case 37:\n        // left\n        this.snake.direction = 'left';\n        break;\n      case 38:\n        // top\n        this.snake.direction = 'top';\n        break;\n      case 39:\n        // right\n        this.snake.direction = 'right';\n        break;\n      case 40:\n        // bottom\n        this.snake.direction = 'bottom';\n        break;\n    }\n  }.bind(that), false);\n}\n\n```\n\n- 在start方法中调用\n\n```js\nbindKey();\n\n```\n\n#### 判断蛇是否吃到食物\n\n```js\n// 在Snake的move方法中\n\n// 在移动的过程中判断蛇是否吃到食物\n// 如果蛇头和食物的位置重合代表吃到食物\n// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换\nvar headX = this.body[0].x * this.width;\nvar headY = this.body[0].y * this.height;\nif (headX === food.x && headY === food.y) {\n  // 吃到食物，往蛇节的最后加一节\n  var last = this.body[this.body.length - 1];\n  this.body.push({\n    x: last.x,\n    y: last.y,\n    color: last.color\n  })\n  // 把现在的食物对象删除，并重新随机渲染一个食物对象\n  food.render(map);\n}\n\n```\n\n### 其它处理\n\n#### 把html中的js代码放到index.js中\n\n避免html中出现js代码\n\n#### 自调用函数的参数\n\n```js\n(function (window, undefined) {\n  var document = window.document;\n\n}(window, undefined))\n\n```\n\n- 传入window对象\n\n将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)\n\n- 传入undefined\n\n在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)\n因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值\n\n#### 整理代码\n\n现在的代码结构清晰，谁出问题就找到对应的js文件即可。\n通过自调用函数，已经防止了变量命名污染的问题\n\n但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)\n将来通过工具把js文件合并并压缩。现在手工合并js文件演示\n\n- 问题1\n\n```js\n// 如果存在多个自调用函数要用分号分割，否则语法错误\n// 下面代码会报错\n(function () {\n}())\n\n(function () {\n}())\n// 所以代码规范中会建议在自调用函数之前加上分号\n// 下面代码没有问题\n;(function () {\n}())\n\n;(function () {\n}())\n\n```\n\n- 问题2 \n\n```js\n// 当自调用函数 前面有函数声明时，会把自调用函数作为参数\n// 所以建议自调用函数前，加上;\nvar a = function () {\n  alert('11');\n}\n    \n(function () {\n  alert('22');\n}())\n\n```\n\n> 本篇文章来自学习资料，仅用于个人复习。","img":"https://p.pstatp.com/origin/137b4000153a999b01359","classty":"前端","channels":null,"name":"Baymax","click":1,"like":1,"is_show":1,"head_show":1,"share_show":1,"copyright_show":1,"message_show":1,"deleted_at":1,"created_at":"2020-09-15T12:29:35.000000Z","updated_at":"2020-09-16T02:54:33.000000Z","label":["Js"],"view_count":1,"prevArticle":[{"id":8,"title":"前端Flex 布局各种使用小方法"}],"nextrAticle":[{"id":10,"title":"使用marked解析MARKDOWN,生成目录,运行代码示例"}]}}