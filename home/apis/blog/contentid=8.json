{"status":"success","code":200,"data":{"id":8,"title":"前端Flex 布局各种使用小方法","desc":"在编写前端博客页面的使用，由于布局比较复杂，很多功能都是用定位编写，但是编写起来复杂且单一。于是部分页面的编写使用了flex,如音乐播放器的布局大部分使用了flex+定位编写,如果你正需要两端对齐，居中，垂直居中等功能实现不妨使用flex布局。","content":"## 前言\n\n> 在编写前端博客页面的使用，由于布局比较复杂，很多功能都是用定位编写，但是编写起来复杂且单一。于是部分页面的编写使用了flex,如音乐播放器的布局大部分使用了flex+定位编写,如果你正需要两端对齐，居中，垂直居中等功能实现不妨使用flex布局。\n\n## 对比案例\n\n我们使用position点位和flex来实现一下垂直居中。\n\n```demo\n<style>\n\t\t\t#main{\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 300px;\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.box{\n\t\t\t\twidth:50%;\n\t\t\t\theight: 100%;\n\t\t\t\tborder:1px solid aquamarine;\n\t\t\t\tflex-grow:1;\n\t\t\t}\n\t\t\t.center{\n\t\t\t\twidth:100px;\n\t\t\t\theight:100px;\n\t\t\t\ttext-align: center;\n\t\t\t\tborder:2px solid #F56C6C;\n\t\t\t}\n\t\t\t/* flex 垂直居中 */\n\t\t\t.flex{\n\t\t\t\tdisplay:flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t}\n\t\t\t/* 使用子绝父相垂直居中 */\n\t\t\t.position{\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t\t.position-center{\n\t\t\t\tposition: absolute;\n\t\t\t\t/* 相对父元素的大小 */\n\t\t\t\tleft:50%;\n\t\t\t\ttop: 50%;\n\t\t\t\t/* 相对自己的大小 */\n\t\t\t\ttransform: translate(-50%,-50%);\n\t\t\t}\n\t\t</style>\n\t\t<div id=\"main\">\n\t\t\t<div class=\"box flex\">\n\t\t\t\t<div class=\"flex-center center\">\n\t\t\t\t\t使用flex\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"box position\">\n\t\t\t\t<div class=\"position-center center\">\n\t\t\t\t\t使用定位\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n```\n\n\n\n## 基本概念\n\n> 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。\n> 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n> 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n\n### 容器属性\n\n- flex-direction\n- flex-wrap\n- flex-flow\n- justify-content\n- align-items\n- align-content\n\n### flex-direction属性\n\nflex-direction属性决定主轴的方向（即项目的排列方向）\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:10%;\n\t\t\theight: 50%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击切换属性</span>\n\t\t<p>\t当前deflex-direction:<span id=\"value\"></span></p>\n\t\t<div id=\"main\">\n\t\t  <div style=\"background-color:coral;\">1</div>\n\t\t  <div style=\"background-color:lightblue;\">2</div>  \n\t\t  <div style=\"background-color:lightgreen;\">3 </div>\n\t\t  <div style=\"background-color:coral;\">4</div>\n\t\t  <div style=\"background-color:lightblue;\">5</div>  \n\t\t</div>\n\t<script>\n\t\tvar count=0;\n\t\tvar demo=document.getElementById('main');\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar arr=['row','row-reverse','column','column-reverse'];\n\t\t\tdemo.style.flexDirection=arr[count%arr.length];\n\t\t\tdocument.getElementById('value').innerText=arr[count%arr.length];\n\t\t\tcount++;\n\t\t\tconsole.log(count%arr.length)\n\t\t}\n\t\t);\n\t</script>\n```\n\n### flex-wrap属性\n\n默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n\n- nowrap（默认）：不换行。\n- wrap：换行，第一行在上方。\n- wrap-reverse：换行，第一行在下方。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:25%;\n\t\t\theight: 50%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击切换属性</span>\n\t\t<p>\t当前flex-wrap:<span id=\"value\"></span></p>\n\t\t<div id=\"main\">\n\t\t  <div style=\"background-color:coral;\">1</div>\n\t\t  <div style=\"background-color:lightblue;\">2</div>  \n\t\t  <div style=\"background-color:lightgreen;\">3 </div>\n\t\t  <div style=\"background-color:coral;\">4</div>\n\t\t  <div style=\"background-color:lightblue;\">5</div>  \n\t\t</div>\n\t<script>\n\t\tvar count=0;\n\t\tvar demo=document.getElementById('main');\n\t\tconsole.log(111)\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar arr=['nowrap','wrap','wrap-reverse'];\n\t\t\tdemo.style.flexWrap=arr[count%arr.length];\n\t\t\tdocument.getElementById('value').innerText=arr[count%arr.length];\n\t\t\tcount++;\n\t\t\t\n\t\t}\n\t\t);\n\t</script>\n\n```\n\n### flex-flow\n\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n```html\n.box {\n  flex-flow: <flex-direction> <flex-wrap>;\n}\n```\n\n###  justify-content属性\n\njustify-content属性定义了项目在主轴上的对齐方式。\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center： 居中\n- space-between：两端对齐，项目之间的间隔都相等\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:10%;\n\t\t\theight: 50%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击切换属性</span>\n\t\t<p>\t当前justify-content:<span id=\"value\"></span></p>\n\t\t<div id=\"main\">\n\t\t  <div style=\"background-color:coral;\">1</div>\n\t\t  <div style=\"background-color:lightblue;\">2</div>  \n\t\t  <div style=\"background-color:lightgreen;\">3 </div>\n\t\t  <div style=\"background-color:coral;\">4</div>\n\t\t  <div style=\"background-color:lightblue;\">5</div>  \n\t\t</div>\n\t<script>\n\t\tvar count=0;\n\t\tvar demo=document.getElementById('main');\n\t\tconsole.log(111)\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar arr=['flex-start','flex-end','center','space-between','space-around'];\n\t\t\tdemo.style.justifyContent=arr[count%arr.length];\n\t\t\tdocument.getElementById('value').innerText=arr[count%arr.length];\n\t\t\tcount++;\n\t\t\t\n\t\t}\n\t\t);\n\t</script>\n\n```\n\n### align-items属性\n\nalign-items属性定义项目在交叉轴上如何对齐。\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:10%;\n\t\t\theight: 50%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击切换属性</span>\n\t\t<p>\t当前align-items:<span id=\"value\"></span></p>\n\t\t<div id=\"main\">\n\t\t  <div style=\"background-color:coral;\">1</div>\n\t\t  <div style=\"background-color:lightblue;\">2</div>  \n\t\t  <div style=\"background-color:lightgreen;\">3 </div>\n\t\t  <div style=\"background-color:coral;\">4</div>\n\t\t  <div style=\"background-color:lightblue;\">5</div>  \n\t\t</div>\n\t<script>\n\t\tvar count=0;\n\t\tvar demo=document.getElementById('main');\n\t\tconsole.log(111)\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar arr=['flex-start','flex-end','center','baseline','stretch'];\n\t\t\tdemo.style.alignItems=arr[count%arr.length];\n\t\t\tdocument.getElementById('value').innerText=arr[count%arr.length];\n\t\t\tcount++;\n\t\t\t\n\t\t}\n\t\t);\n\t</script>\n\n```\n\n### align-content属性\n\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n- flex-start:与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center： 与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tflex-wrap: wrap; /* 使flex容器一行放不下子项换行*/\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:20%;\n\t\t\theight: 20%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击切换属性</span>\n\t\t<p>\t当前align-content:<span id=\"value\"></span></p>\n\t\t<div id=\"main\">\n\t\t  <div style=\"background-color:coral;\">1</div>\n\t\t  <div style=\"background-color:lightblue;\">2</div>  \n\t\t  <div style=\"background-color:lightgreen;\">3 </div>\n\t\t  <div style=\"background-color:coral;\">4</div>\n\t\t  <div style=\"background-color:lightblue;\">5</div>  \n\t\t  <div style=\"background-color:coral;\">6</div>\n\t\t  <div style=\"background-color:lightblue;\">7</div>  \n\t\t  <div style=\"background-color:lightgreen;\">8 </div>\n\t\t  <div style=\"background-color:coral;\">9</div>\n\t\t  <div style=\"background-color:lightblue;\">10</div>  \n\t\t</div>\n\t<script>\n\t\tvar count=0;\n\t\tvar demo=document.getElementById('main');\n\t\tconsole.log(111)\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar arr=['flex-start','flex-end','center','space-between','space-around','stretch'];\n\t\t\tdemo.style.alignContent=arr[count%arr.length];\n\t\t\tdocument.getElementById('value').innerText=arr[count%arr.length];\n\t\t\tcount++;\n\t\t\t\n\t\t}\n\t\t);\n\t</script>\n```\n\n## 项目的属性\n\n- order\n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n###  order属性\n\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tflex-wrap: wrap; /* 使flex容器一行放不下子项换行*/\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\twidth:20%;\n\t\t\theight: 100%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击随机排序</span>\n\t\t<div id=\"main\">\n\t\t  <div class=\"box\" style=\"background-color:coral;\">1<br />\n\t\t  <span>order:0</span>\n\t\t  </div>\n\t\t  <div class=\"box\" style=\"background-color:lightblue;\">2\n\t\t  <br />\n\t\t  <span>order:0</span>\n\t\t  </div>  \n\t\t  <div class=\"box\" style=\"background-color:lightgreen;\">3 \n\t\t  <br />\n\t\t  <span>order:0</span>\n\t\t  </div>\n\t\t  <div class=\"box\" style=\"background-color:coral;\">4\n\t\t  <br />\n\t\t  <span>order:0</span>\n\t\t  </div>\n\t\t  <div class=\"box\" style=\"background-color:lightblue;\">5\n\t\t  <br />\n\t\t  <span>order:0</span>\n\t\t  </div>  \n\t\t</div>\n\t<script>\n\t\tvar box=document.querySelectorAll('.box');\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar leng=box.length;\n\t\t\tfor(var i=0;i<leng;i++){\n\t\t\t\tvar order=Math.floor(Math.random()*10);\n\t\t\t\tbox[i].style.order=order;\n\t\t\t\tbox[i].querySelector('span').innerText=\"order:\"+order;\n\t\t\t}\n\t\t}\n\t\t);\n\t</script>\n```\n\n### flex-grow属性\n\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n```demo\n<style> \n\t\t#main\n\t\t{\n\t\t    width:80%;\n\t\t    height:100px;\n\t\t    border:1px solid black;\n\t\t    display:flex;\n\t\t\tflex-wrap: wrap; /* 使flex容器一行放不下子项换行*/\n\t\t\tmargin: 10px auto;\n\t\t}\n\t\t#main div{\n\t\t\theight: 100%;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t}\n\t\t#toggle{\n\t\t\tdisplay: inline-block;\n\t\t\tpadding:5px 10px;\n\t\t\tcolor:#fff;\n\t\t\tbackground-color: aquamarine;\n\t\t\tmargin:10px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t</style>\n\t\t<span id=\"toggle\">点击随机占比空间</span>\n\t\t<div id=\"main\">\n\t\t  <div class=\"box\" style=\"background-color:coral;\">1<br />\n\t\t  <span>flex-grow:0</span>\n\t\t  </div>\n\t\t  <div class=\"box\" style=\"background-color:lightblue;\">2\n\t\t  <br />\n\t\t  <span>flex-grow:0</span>\n\t\t  </div>  \n\t\t</div>\n\t<script>\n\t\tvar box=document.querySelectorAll('.box');\n\t\tdocument.getElementById('toggle').addEventListener('click',function (){\n\t\t\tvar leng=box.length;\n\t\t\tfor(var i=0;i<leng;i++){\n\t\t\t\tvar grow=Math.floor(Math.random()*10);\n\t\t\t\tbox[i].style.flexGrow=grow;\n\t\t\t\tbox[i].querySelector('span').innerText=\"flex-grow:\"+grow;\n\t\t\t}\n\t\t}\n\t\t);\n\t</script>\n\n```\n\n### flex-shrink属性\n\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n### flex-basis属性\n\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n### flex属性\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n### align-self属性\n\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n## 参考文献\n\n- [Flex 布局语法教程](https://www.runoob.com/w3cnote/flex-grammar.html)","img":"https://p.pstatp.com/origin/fefa0002673fc73a2c6e","classty":"前端","channels":null,"name":"Baymax","click":1,"like":1,"is_show":1,"head_show":1,"share_show":1,"copyright_show":1,"message_show":0,"deleted_at":1,"created_at":"2020-09-12T11:44:33.000000Z","updated_at":"2020-09-12T11:54:32.000000Z","label":["Css","Flex"],"view_count":1,"prevArticle":[{"id":7,"title":"使用vue制作一个属于自己的音乐播放器"}],"nextrAticle":[{"id":9,"title":"面向对象游戏案例：贪吃蛇"}]}}