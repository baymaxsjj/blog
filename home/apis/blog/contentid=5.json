{"status":"success","code":200,"data":{"id":5,"title":"Vue博客前端总结——Vue全家桶","desc":"经过前面一系列的配置，也可以开始对项目部分开始编写。其中会Vue 全家桶 Vue Router及 Vuex进行部分总结，还会对axios进行封装，对错误进行统一的拦截。这些插件是对路由管理，数据交流，网络交互各个功能的实现，在项目中使用频繁，对其熟悉基本的使用方法，能够大大的提高效率。","content":"## 前言\n\n> 经过前面一系列的配置，也可以开始对项目部分开始编写。其中会Vue 全家桶 [Vue Router](https://router.vuejs.org/zh/) 及 [Vuex](https://vuex.vuejs.org/zh/) 进行部分总结，还会对[axios](http://www.axios-js.com/) 进行封装，对错误进行统一的拦截。这些插件是对路由管理，数据交流，网络交互各个功能的实现，在项目中使用频繁，对其熟悉基本的使用方法，能够大大的提高效率。\n\n### Vue Router\n\n>  Vue Router 是 [Vue.js](http://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌 \n\n#### 简单配置\n\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\n\nconst NewHome = () =>\n    import ('./../views/NewHome.vue')\nconst name = \"云墨白的博客\"\nconst routes = [\n    {\n        // 会匹配所有路径\n        path: '*',\n        name: 'Windmill',\n        component: Windmill,\n        meta: {\n            title: '哎呀页面不见了-' + name\n        }\n    },\n    {\n        path: '/blog',\n        name: 'NewHome',\n        component: NewHome,\n        meta: {\n            // 需要被缓存\n            keepAlive: true, \n            title: '文章-' + name\n        }\n    },\n```\n\n#### 常用方法\n\n- 动态路由：此配置用于动态的设置路由参数，就如 https://www.yunmobai.cn/blog/3 网址，后面的3是动态请求获取，然后在根据值，再去获取数据。\n- 路由跳转：可以通过`<route-link>`标签进行跳转，但有时需要通过js进行跳转，如axios统一拦截是对为登录用户跳转到登录界面等！\n- 路由懒加载：使用懒加载，防止首屏加载的空白时间过长！\n- 路由守卫者：对路由跳转进行操作！如，保存数据提示等等，可以有全局守望和组件守卫，对不同的需求进行使用。\n\n```javascript\n// 动态路径参数 以冒号开头\n{ path: '/blog/:id', component: Blog }\n//获取参数\nthis.$route.params.id\n//跳转\nthis.$router.push('/user-admin')\n//组件守卫\nbeforeRouteEnter\nbeforeRouteUpdate (2.2 新增)\nbeforeRouteLeave\n```\n\n### VueX\n\n>  Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化 \n\n#### 简单配置\n\n```javascript\nimport http from '@/utils/httpindex.js'\nconst user = {\n    //初始化\n    state: {\n        token: localStorage.getItem('user_token') || '',\n    },\n    //store.commit('setToken')\n    mutations: {\n        setToken(state, data) { //写入token\n            state.token = data\n        },\n    },\n    //store.dispatch('setToken')\n    actions: {\n        setToken({ commit }, data) {\n            // localStorage.setItem(\"so_token\", data);\n            commit('setToken', data)\n        }\n    }\n}\nexport default user\n```\n\n通过以上的基本配置，就可以把服务器传过来的state保存起来\n\n-  state:一个初始 state 对象 \n-  mutations: 更改 Vuex 的 store 中的状态的唯一方法，\n-  actions:  通过提交的是 mutation，而不是直接变更状态 ， 可以包含任意异步操作。 \n\n大多数都是通过actions调用mutations去修改数据，而不直接通过 `store.state.token`去修改token值\n\n### axios\n\n通过axios的封装对后台的数据进行统一的处理，能够提高开发效率，\n\n```javascript\nimport axios from 'axios'\nimport store from '../pages/home/store'\nimport { Notification } from 'element-ui';\nimport router from '@/pages/home/router'\nvar instance = axios.create({\n    //请求地址\n    baseURL: process.env.VUE_APP_URL,\n    //超时时间\n    timeout: 10000,\n});\n// 添加请求拦截器\ninstance.interceptors.request.use(function(config) {\n    // 在发送请求之前做些什么\n    //设置请求头\n    config.headers['X-Requested-With'] = 'XMLHttpRequest'\n    return config;\n}, function(error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n});\n\n// 添加响应拦截器\ninstance.interceptors.response.use(function(response) {\n        // 对响应数据做点什么\n        // Message('操作成功')\n        if (response.headers.authorization) {\n            //通过VueX保存数据\n            store.dispatch(\"setToken\", response.headers.authorization);\n        }\n        // 打印错误信息\n        return Promise.reject(response.data)\n    },\n    function(error) {\n        // 对响应错误做点什么\n        switch (error.response.status) {\n           \n            case 422:\n                Notification.warning({\n                    title: '温馨提示',\n                    message: error.response.data.message,\n                    onClose() {\n                        //通过VueX清除用户信息\n                        store.dispatch(\"logOut\")\n                        router.push('/login')\n                    },\n                });\n                break;\n            default:\n                Notification.error({\n                    title: '错误提示 ' + error.response.status,\n                    message: error.response.data.message,\n                });\n\n        }\n        return Promise.reject(error)\n    });\nexport default instance;\n```\n\n在main.js中把axios的get和post方法挂载到vue的原型上，在之后就可以通过`this.$get`和`this.$post`去请求数据了。\n\n```javascript\nVue.prototype.$get = axios.get;\nVue.prototype.$post = axios.post;\n```\n\n> 本文为个人理解，若有不足，敬请指出","img":"https://p.pstatp.com/origin/13822000113a5bae648b6","classty":"前端","channels":null,"name":"Baymax","click":3,"like":1,"is_show":1,"head_show":1,"share_show":1,"copyright_show":1,"message_show":0,"deleted_at":1,"created_at":"2020-09-03T00:12:18.000000Z","updated_at":"2020-10-08T06:41:22.000000Z","label":["Vue","Vuex","Vue Router","axios"],"view_count":1,"prevArticle":[{"id":4,"title":"Vue博客前端总结——多页面设置"}],"nextrAticle":[{"id":6,"title":"Vue前端总结——SEO优化"}]}}