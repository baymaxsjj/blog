{"status":"success","code":200,"data":{"id":10,"title":"使用marked解析MARKDOWN,生成目录,运行代码示例","desc":"写文章我就采用了mavon-editor,在后台将写好的Markdown文章保存到数据库里，前台在获取Markdown文章将其解析成html代码然后渲染。所以写文章不用愁了，那如何解析Markdown呢！我前前后后用了`mavon-editor`（包太大），`vue-marked`（功能少）等等插件来实现！结果不满足预期。所以不如使用marked.js直接解析呢！包小效率高，于是就对marked.js进行封装，实现了目录，运行代码块，图片查看等功能！已经能满足了基本的需求。","content":"## 前言\n\n对于我来说一个博客系统就是用来总结自己所学得知识的。写写文章，巩固技术，写文章我就采用了`mavon-editor`,在后台将写好的Markdown文章保存到数据库里，前台在获取Markdown文章将其解析成html代码然后渲染。所以写文章不用愁了，那如何解析Markdown呢！我前前后后用了`mavon-editor`（包太大），`vue-marked`（功能少）等等插件来实现！结果不满足预期。所以不如使用marked.js直接解析呢！包小效率高，于是就对marked.js进行封装，实现了目录，运行代码块，图片查看等功能！已经能满足了基本的需求。\n\n### marked.js\n\n> 一个功能齐全的markdown解析器和编译器，用JavaScript编写。 专为速度而设计。[marked.js官网](https://marked.js.org/)\n>\n> - 快速构建\n> - 用于解析markdown的低级编译器，无需长时间缓存或阻塞\n> - 非常轻量，同时实现支持的falses和规格的所有降价功能\n> - 支持浏览器，服务器或命令行界面（CLI）\n\n#### 安装\n\n```javascript\nnpm install marked --save\n//在vue组件中导入\nimport marked  from 'marked' \n```\n\n#### 使用\n\n```javascript\n//markdownString:要解析的markdown，必须为字符串\n//options:marked.js的配置\n//callback:回调函数。I如果 options 参数没有定义，它就是第二个参数。\nmarked(markdownString [,options] [,callback])\n```\n\n#### 基本配置\n\n```javascript\n marked.setOptions({\n      renderer: rendererMD,\n      gfm: true,//默认为true。 允许 Git Hub标准的markdown.\n      tables: true,//默认为true。 允许支持表格语法。该选项要求 gfm 为true。\n      breaks: false,//默认为false。 允许回车换行。该选项要求 gfm 为true。\n      pedantic: false,//默认为false。 尽可能地兼容 markdown.pl的晦涩部分。不纠正原始模型任何的不良行为和错误。\n      sanitize: false,//对输出进行过滤（清理）\n      smartLists: true,\n      smartypants: false//使用更为时髦的标点，比如在引用语法中加入破折号。\n  });\n```\n\n### 实现目录\n\n实现目录功能，网上又很多的写法！像我这样的小白也看不懂，代码都好长。我实现的过程肯有些投机取巧了。实现的过程也很简单，没有正则表达，没有复杂的代码也就几行代码吧！\n\n#### 实现原理\n\n看看下面这张图，观察一下标题和目录有哪些相同之处。\n\n其实从上往下看没有什么不同，从左往右看也就是出现了缩进。\n\n所以我的目录实现原理，将所以的标题提取出来，然后根据其标题大小进行缩进。\n![1600852591724.png](https://p.pstatp.com/origin/1373100029537b67fcab9)\n#### 自定义渲染方式\n\n知道思路后，改如何实现呢！通过marked.js文档，我们可以重写renderer（渲染），\n\n```javascript\n let rendererMD = new marked.Renderer();\n let that=this\n /*\n 重写标题\n text:标题文本\n level:标签\n */\n rendererMD.heading = function(text, level, raw) {\n     //保存这篇文章的最大标签 \n     if(level<that.maxTitle){\n         that.maxTitle=level\n     }\n     anchor+=1\n     /* \n     toc:数组用于保存标题，\n     id:标题id,用于点击目录滚动到改标题\n     tag:记录属于那个标签（h1……h6）\n     test:标签内容\n     */\n     that.toc.push(\n         {\n             'id':anchor,\n             'tag':level,\n             'text':text\n         }\n     )\n     return `<h${level} id=\"toc-nav${anchor}\">${text}</h${level}>`;\n };\n//重写a标签，在新标签打开\n rendererMD.link = function(href,title,text){\n \treturn '<a href=\"'+href+'\" title=\"'+text+'\" target=\"_blank\">'+text+'</a>';\n}\n//更多规则到marked.js官网查看\n```\n\n```html\n <ul >\n \t<li v-for=\"item of toc\" :key=\"item.id\"  @click=\"toTarget(item.id)\" :style=\"{'padding-left':item.tag-maxTitle+'em'}\" v-html=\"item.text\">\n\t</li>\n</ul>\n```\n\n###### 为什么保存最大标题\n\n通过也是渲染成功后，如果没有没有最大标题，假如文章只有h6标题，那么目录还是会缩进6个字符，不好看，这样做的目的就是为了保证所有的标题都是从最大的以下开始缩进。缩进利用的padding-left。`item.tag-maxTitle`也好理解：\n\n```\n//最大标题从h1开始\t\t\t//最大标题从h4开始\nh1->0em\t\t\t\t\th4->0em\nh2->1em\t\t\t\t\th5->1em\n……\t\t\t\t\t\t……\n```\n\n上面可以看出最大标签始终为0em，其它标签都是相对最大标签的偏移。\n### 运行代码\n像我的博客，就可以运行一些代码示例来展示，主要原理就是通过Components 定义一个运行代码的标签。通过marked.js 解析代码块，将特点语言的代码块提取出来（我这里就是将demo 标记的语言提取出来），然后拼接成自定义的标签。\n```js\n rendererMD.code = function (code, language) {\n                 // 提取language标识为 demo 的代码块重写\n                     if (language === 'demo') {\n                         DEMO_UID+=2\n                        // 页面中可能会有很多的示例，这里增加ID标识\n                        const id = 'demo-mobai-template-' + (DEMO_UID)\n                        // 将代码内容保存在template标签中\n                        const template = `<template type=\"text/demo\" id=\"${id}\">${code}</template>`\n                        // 将template和自定义标签通过ID关联\n                        const sandbox = `<demo-mobai template=\"${id}\"></demo-mobai>`\n                        // 返回新的HTML\n                        return template + sandbox\n                    }\n}\n```\n上面解决了标签问题，接下来就是解析标签，以下的大部分代码[参考自水墨寒](https://www.smohan.net/)，我修改了部分代码，主要解析了两个问题，\n一是，默认的运行代码会有一个样式，我通过id号区分要显示和不要显示的，\n二是，在我用的时候发现不能引入在线的js,只能运行代码块中的代码，这样就不太好了，比如我要用一些框架，比我来说我的这篇文章，[vue 音乐播放器](https://www.yunmobai.cn/blog/7),就能运行在线的vue 框架和element ui,这个问题是由于，引入的ji代码后执行，所有不能解析，我的解决办法就是通过Promise当js加载成功后，resolve();添加到Promise数组中，通过Promise.all(Promise数组)当所有js 都加载成功后在将代码块中的代码添加到Shadow DOM中。\n\n```js\n let arr=[]\n        // 4. 拼合所有Script\n        for(let i=0;i<scripts.length;i++){\n            // 全局替换document为新的$shadowDocument\n            if(scripts[i].src){\n\t\t\t\t// 创建\n                const $sc = document.createElement('script')\n                $sc.setAttribute(\"type\", \"text/javascript\");\n                $sc.setAttribute('src', scripts[i].src);\n                this.shadow.appendChild($sc)\n                arr.push(\n\t\t\t\t\t//通过Promise来解决，所有js都加载成功后，在将代码添加到Shadow DOM\n                    new Promise(function(resolve,reject){\n\t\t\t\t\t//js 加载完成回执行\n                    $sc.onload = function() {\n                        console.log($sc)\n                        resolve();\n                        };\n                    })\n                )\n                this.shadow.getElementById('demo-run').removeChild(scripts[i])\n                continue\n            }\n           \n            $globalDefines.innerHTML += `{\n                ${scripts[i].textContent.replace(/(document)\\.(getElementById|querySelector|querySelectorAll|getElementsByClassName|getElementsByName|getElementsByTagName)/gm, '$shadowDocument.$2').replace(/\\r\\n?/gm, '')}\n            }`\n            // 移除旧节点\n            this.shadow.getElementById('demo-run').removeChild(scripts[i])\n        }\n        $globalDefines.innerHTML += `})();`\n        \n        Promise.all(arr).then(()=>{\n            console.log('js加载成功');\n            this.shadow.appendChild($globalDefines)\n        })\n```\n\n\n\n> Web Components 标准非常重要的一个特性是，它使开发者能够将HTML页面的功能封装为 custom elements（自定义标签），而往常开发者不得不写一大堆冗长、深层嵌套的标签来实现同样的页面功能\n\n首先要掌握两个知识点，Components 和Shadow DOM[详情参考MDN](https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements)\n这两个我就不过多说，其实我也不太会，也没MDN说的细，不过使用的要谨慎，有兼容问题，\n下面的代码才是关键，上面已经将特定语言的代码快转化成自定义标签，通过marked.js 渲染到页面上了，但并不起作用，因为浏览器识别不出改标签，下面通过Components 定义一个标签，然后通过Shadow ,以下是我博客中解析MARKDOWN的一个组件，其中使用到一个vue-dompurify-html用了对MARKDOWN过滤防止恶意代码，\n```js\n<template>\n    <div class=\"marked\">\n        <div ref=\"preview\" class=\"write\">\n\t//没有vue-dompurify-html，可以将v-dompurify-html=\"html\"改成v-html=\"html\"\n            <span\n                v-if=\"dompurify\"\n                v-dompurify-html=\"html\"\n            ></span>\n            <span\n                v-else\n                v-html=\"html\"\n            ></span>\n\t//没有使用element ui 可以将下面删除\n        <el-image \n            v-if=\"imgView\"\n            id=\"imgview\"\n            style=\"height:0px\"\n            :src=\"url\" \n            :preview-src-list=\"srcList\">\n            </el-image>\n        </div>\n        <transition name=\"slide-fade\">\n        <div class=\"toc\" v-if=\"tocNav&&toc.length\" v-show=\"tocIsShow\">\n            <div class=\"toc-top a-tag\">\n                <span class=\"toc-title\">TOC</span>\n                <a href=\"javascript:;\" class=\"toc-close\" @click=\"tocIsShow=false\">「 关闭 」</a>\n            </div>\n            \n            <ul >\n                <li v-for=\"item of toc\" :key=\"item.id\"  @click=\"toTarget(item.id)\" :style=\"{'padding-left':item.tag-maxTitle+'em'}\" v-html=\"item.text\">\n                </li>\n            </ul>\n        </div>\n        </transition>\n        <transition name=\"slide-fade\">\n             <div class=\"toc-tag\"  v-if=\"tocNav &&toc.length\" v-show=\"!tocIsShow\" @click=\"tocIsShow=true\"> \n                <i></i>\n                <i></i>\n                <i></i>\n            </div>\n        </transition>\n        \n    </div>\n\n</template>\n<script>\n\nimport marked  from 'marked' \nimport hljs   from '@/utils/highlight.min.js' \nimport { Notification } from 'element-ui';\nlet rendererMD = new marked.Renderer();\nconst TAG_NAME = 'demo-mobai'\nlet Deom=true;\ntry {\n　　// 此处是可能产生例外的语句\n    customElements.define(TAG_NAME, class DemoSandbox extends HTMLElement {\n    constructor() {\n        super()\n        // 使用影子DOM\n        this.shadow = this.attachShadow({\n        mode: 'open'\n        })\n        // 获取关联的代码块模板的ID\n        const templateId = this.getAttribute('template')\n        const $template = document.getElementById(templateId)\n        if (!templateId) {\n        return\n        }\n        // 获取代码块内容\n        const template = $template.innerHTML\n        console.log(templateId)\n        let id=parseInt(templateId.split('demo-mobai-template-')[1]);\n        console.log(id%2==0)\n        if(id%2==0){\n              // 用获取到的代码块来填充影子DOM的HTML\n            let code=marked('``` html  \\n'+template+'\\n```', {\n                sanitize: false,\n                highlight: function (code) {\n                        return hljs.highlightAuto(code).value;\n                },\n            })\n            this.shadow.innerHTML =`\n            <style>\n                :host {\n                    display:block;\n                    width:100%;\n                    padding: 0;\n                    border: 1px solid #f0f0f0;\n                    color: #414240;\n                    font-size: 1rem;\n                    position: relative;\n                    margin: 10px 0;\n                    min-height: 36px;\n                }\n                :host:before {\n                    content: \" \";\n                    position: absolute;\n                    -webkit-border-radis: 50%;\n                    border-radius: 50%;\n                    background: #ff6058;\n                    width: 12px;\n                    height: 12px;\n                    left: 15px;\n                    margin-top: 10px;\n                    -webkit-box-shadow: 20px 0 #ffbd2b, 40px 0 #3cef57;\n                    box-shadow: 20px 0 #ffbd2b, 40px 0 #3cef57;\n                    z-index: 2;\n                }\n                :host:after {\n                    content: \"demo\";\n                    position: absolute;\n                    top:0px;\n                    left: 50%;\n                    z-index: 2;\n                    color:var(--main-6);\n                    font-weight:bold;\n                    transform: translateX(-50%);\n                    font-size: 20px;\n                    line-height:32px\n                }\n                * {\n                    box-sizing: border-box;\n                }\n                \n                #demo-run {\n                    padding:20px;\n                    background-color:white;\n                    border-top: 32px solid #ecf5ff;\n                    border-radius: 6px;\n                    overflow-x: auto;\n                    overflow-y: hidden;\n                    position:relative;\n                }\n                #demo-code {\n                    padding:20px;\n                    border-top: 1px solid #eaeefb;\n                    font-size: 85%;\n                    font-family: \"Operator Mono SSm A\",\"Operator Mono SSm B\",\"Operator Mono\",\"Source Code Pro\",Menlo,Consolas,Monaco,monospace;\n                    line-height: 1.4;\n                    background-color:#fefefe; \n                }\n                #demo-code code{\n                    display: block;\n                    overflow-x: auto;\n                }\n                #demo-open {\n                    width:100%;\n                    -webkit-appearance: none;\n                    border:none;\n                    border-top: 1px solid #eaeefb;\n                    text-align:center;\n                    padding: 10px 20px;\n                    font-size: 14px;\n                    cursor: pointer;\n                    outline: 0;\n                    transition: background-color .3s;\n                    color: var(--main-6);\n                    background-color:#fff\n                }\n                #demo-open:hover,\n                #demo-open:active {\n                    background-color: var(--main-9);\n                }\n            </style>\n            <div id=\"demo-run\">${template}</div>\n            <div id=\"demo-code\" hidden>${code}</div>\n            <button id=\"demo-open\">查看源码</button>\n            <style>\n            .hljs{display:block;overflow-x:auto}.hljs-comment,.hljs-meta{color:#969896}.hljs-emphasis,.hljs-quote,.hljs-string,.hljs-strong,.hljs-template-variable,.hljs-variable{color:#df5000}.hljs-keyword,.hljs-selector-tag,.hljs-type{color:#a71d5d}.hljs-attribute,.hljs-bullet,.hljs-literal,.hljs-number,.hljs-symbol{color:#0086b3}.hljs-name,.hljs-section{color:#63a35c}.hljs-tag{color:#333}.hljs-attr,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-selector-pseudo,.hljs-title{color:#795da3}.hljs-addition{color:#55a532;background-color:#eaffea}.hljs-deletion{color:#bd2c00;background-color:#ffecec}.hljs-link{text-decoration:underline}.hljs-comment,.hljs-quote{color:#998}.hljs-keyword,.hljs-selector-tag,.hljs-subst{font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}\n            </style>\n            `\n            const co= this.shadow.getElementById(\"demo-code\")\n            this.shadow.getElementById(\"demo-open\").addEventListener(\n            \"click\", (function() {\n                co.hasAttribute(\"hidden\") ? co.removeAttribute(\"hidden\") : co.setAttribute(\"hidden\", \"\")\n            }));\n        }else {\n             this.shadow.innerHTML =`\n            <div id=\"demo-run\">${template}</div>\n            `\n        }\n\n      \n        // 移除掉关联的template节点\n            // 移除掉关联的template节点\n        $template.parentNode.removeChild($template)\n        // 处理 script\n        // 1. 查找影子DOM中刚才填充的script节点\n        const scripts = Array.from(this.shadow.querySelectorAll('script'))\n        console.log(scripts)\n        // 2. 创建一个用来保存影子DOM根节点的Script\n        const $globalDefines = document.createElement('script')\n        // 3. 创建一个自执行函数，将代码包裹起来\n        $globalDefines.innerHTML = `(function(){\n        const $component = document.querySelector('${TAG_NAME}[template=\"${templateId}\"]');\n        const $shadowDocument = $component.shadowRoot;\n        `\n        let arr=[]\n        // 4. 拼合所有Script\n        for(let i=0;i<scripts.length;i++){\n            // 全局替换document为新的$shadowDocument\n            if(scripts[i].src){\n\t\t\t\t// 创建\n                const $sc = document.createElement('script')\n                $sc.setAttribute(\"type\", \"text/javascript\");\n                $sc.setAttribute('src', scripts[i].src);\n                this.shadow.appendChild($sc)\n                arr.push(\n\t\t\t\t\t//通过Promise来解决，所有js都加载成功后，在将代码添加到Shadow DOM\n                    new Promise(function(resolve,reject){\n\t\t\t\t\t//js 加载完成回执行\n                    $sc.onload = function() {\n                        console.log($sc)\n                        resolve();\n                        };\n                    })\n                )\n                this.shadow.getElementById('demo-run').removeChild(scripts[i])\n                continue\n            }\n           \n            $globalDefines.innerHTML += `{\n                ${scripts[i].textContent.replace(/(document)\\.(getElementById|querySelector|querySelectorAll|getElementsByClassName|getElementsByName|getElementsByTagName)/gm, '$shadowDocument.$2').replace(/\\r\\n?/gm, '')}\n            }`\n            // 移除旧节点\n            this.shadow.getElementById('demo-run').removeChild(scripts[i])\n        }\n        $globalDefines.innerHTML += `})();`\n        \n        Promise.all(arr).then(()=>{\n            console.log('js加载成功');\n            this.shadow.appendChild($globalDefines)\n        })\n    }\n})\n} catch(error) {\n    Deom=false\n    Notification.error({\n        title: '浏览器不支持该功能',\n        message: '请使用最新浏览器',\n    })\n}\n\nexport default {\n    name: 'MyMarked',\n    props: {\n        initialValue: {\n            // 初始化内容\n            type: String,\n            default: ''\n        },\n        markedOptions: {\n            type: Object,\n            default: () => ({})\n        },\n        copyCode: {// 复制代码\n            type: Boolean,\n            default: true\n        },\n        dompurify:{\n            type:Boolean,\n            default:true\n        },\n        copyBtnText: {// 复制代码按钮文字\n            type: String,\n            default: '复制代码'\n        },\n        imgView:{\n            type: Boolean,\n            default: true\n        },\n        tocNav:{\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            html: '',\n            previewImgModal: false,\n            previewImgSrc: '',\n            previewImgMode: '',\n            toc:[],\n            tocIsShow:document.body.clientWidth>600?true:false,\n            maxTitle:6,\n            url:'https://iconfont.alicdn.com/t/43f13cdf-39c8-4053-affd-b2d3e75b1e0e.png',\n            srcList: [\n                'https://iconfont.alicdn.com/t/43f13cdf-39c8-4053-affd-b2d3e75b1e0e.png',\n                'https://iconfont.alicdn.com/t/9d79fc67-6f0d-4af2-90e7-ce50ef4404b7.png'\n            ]\n        };\n    },\n    mounted() {\n        this.translateMarkdown();\n    },\n    methods: {\n        translateMarkdown() {\n            let that=this\n            let DEMO_UID = 0\n            let SHOW_UID=0\n            rendererMD.code = function (code, language) {\n                 // 提取language标识为 demo 的代码块重写\n                 if(Deom){\n                     if (language === 'demo') {\n                         DEMO_UID+=2\n                        // 页面中可能会有很多的示例，这里增加ID标识\n                        const id = 'demo-mobai-template-' + (DEMO_UID)\n                        // 将代码内容保存在template标签中\n                        const template = `<template type=\"text/demo\" id=\"${id}\">${code}</template>`\n                        // 将template和自定义标签通过ID关联\n                        const sandbox = `<demo-mobai template=\"${id}\"></demo-mobai>`\n                        // 返回新的HTML\n                        return template + sandbox\n                    }\n                    if(language === 'show'){\n                         // 页面中可能会有很多的示例，这里增加ID标识\n                        const id = 'demo-mobai-template-' + (++SHOW_UID)\n                        // 将代码内容保存在template标签中\n                        const template = `<template type=\"text/demo\" id=\"${id}\">${code}</template>`\n                        // 将template和自定义标签通过ID关联\n                        const sandbox = `<demo-mobai template=\"${id}\"></demo-mobai>`\n                        // 返回新的HTML\n                        return template + sandbox\n                    }\n                 }else{\n                      if (language === 'demo') {\n                          language='html';\n                      }\n                 }\n                \n                 // 其他标识的代码块依然使用代码高亮显示\n                 return `<div class=\"code-block\"><span class=\"code-language\">${language}</span><span class=\"copy-code el-icon-files\">${that.copyBtnText}</span><pre rel=\"${language}\"><code class=\"hljs ${language}\">${hljs.highlightAuto(code).value}</code></pre></div>`\n            }\n            rendererMD.link = function(href,title,text){\n                return '<a href=\"'+href+'\" title=\"'+text+'\" target=\"_blank\">'+text+'</a>';\n            }\n            let anchor=0;\n            if(that.tocNav){\n                rendererMD.heading = function(text, level, raw) {\n                    // const anchor = tocify.add(text, level);\n                    if(level<that.maxTitle){\n                        that.maxTitle=level\n                    }\n                    anchor+=1\n                    that.toc.push(\n                        {\n                            'id':anchor,\n                            'tag':level,\n                            'text':text\n                        }\n                    )\n                    return `<h${level} id=\"toc-nav${anchor}\">${text}</h${level}>`;\n                };\n            }\n            // customElements.define(TAG_NAME, Demobox)\n            let html = marked(this.initialValue, {\n                sanitize: false,\n                renderer: rendererMD,\n               \n                ...this.markedOptions\n            })\n            this.html = html;\n            // this.addCopyListener();\n            if(this.imgView){\n                this.addImageClickListener();\n            }\n        },\n        addImageClickListener() {// 监听查看大图\n            const {imgs = []} = this;\n            if (imgs.length > 0) {\n                for (let i = 0, len = imgs.length; i < len; i++) {\n                    imgs[i].onclick = null;\n                }\n            }\n            setTimeout(() => {\n                this.imgs = this.$refs.preview.querySelectorAll('img');\n                for (let i = 0, len = this.imgs.length; i < len; i++) {\n                    this.imgs[i].onclick = () => {\n                        const src = this.imgs[i].getAttribute('src');\n                        this.srcList[1]=src\n                        this.url=src\n                            setTimeout(() => {\n                            document.getElementById(\"imgview\").click()\n                            },5)\n                    };\n                }\n            }, 1000);\n        },\n        toTarget(target){\n            target='#toc-nav'+target\n            let toElement = document.querySelector(target);\n            toElement.scrollIntoView({\n\t\t\t\tbehavior: 'smooth',\n\t\t\t\tblock: 'center',\n\t\t\t\tinline: 'nearest'\n            })\n        },\n    },\n    watch: {\n        initialValue() {\n            this.translateMarkdown();\n        }\n    },\n    destroyed () {\n        window.removeEventListener('scroll', this.scroll, false)\n    },\n};\n</script>\n<style lang=\"stylus\" scoped>\n@import '~@/assets/style/marked.css'\n.marked\n    display: flex;\n    flex-flow: row nowrap;\n    position: relative;\n    align-items: flex-start;\n    .write\n        flex: 1 1 auto;\n        width: 1%;\n        overflow: hidden;\n    .toc\n        width: 220px;\n        margin-left: 20px;\n        border-left: 1px solid #efefee\n        position: sticky;\n        top: 100px;\n        flex-shrink: 0;\n        padding-left 10px\n        .toc-top\n            display: flex;\n            justify-content: space-between;\n            align-items center\n            padding 10px 0\n            .toc-title\n                font-size 18px\n                &:before\n                    content '#'\n                    color var(--main-6)\n                    padding-right 3px\n            .toc-close\n                font-size 14px;\n                color #989898\n                cursor pointer\n        \n        li\n            display table\n            margin-bottom: 10px;\n            line-height: 1em;\n            text-align: left;\n            font-size: 14px;\n            color: #8599ad;\n            transition: .2s;\n            cursor pointer\n            &:hover\n                color var(--main-6)\n                text-decoration: underline;\n            &:before\n                content '- '\n        .acitve\n            color var(--main-6)\n    .toc-tag\n        width 40px\n        height 40px\n        position fixed\n        right 20px\n        bottom 85px\n        z-index 999\n        background #585d5d\n        display flex\n        align-items: center;\n        justify-content: center;\n        flex-flow: column;\n        transition all .3s\n        cursor pointer\n        &:hover\n            background-image: linear-gradient(to right, #8EC5FC,#9FACE6)\n            i:nth-child(1)\n                transform translateX(2px)\n            i:nth-child(3)\n                transform translateX(-2px)\n        i\n            display: block;\n            width: 24px;\n            height: 2px;\n            background-color: hsla(0,0%,100%,.75);\n            margin: 3px 0;\n            transition: all .2s ease-in-out;\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .3s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-to\n/* .slide-fade-leave-active for below version 2.1.8 */ {\n  transform: translateX(10px);\n  opacity: 0;\n}\n</style>\n```","img":"https://p.pstatp.com/origin/138310002be9773ff763c","classty":"前端","channels":null,"name":"Baymax","click":3,"like":1,"is_show":1,"head_show":1,"share_show":1,"copyright_show":1,"message_show":1,"deleted_at":1,"created_at":"2020-09-23T11:19:45.000000Z","updated_at":"2020-12-16T11:41:39.000000Z","label":["marked"],"view_count":1,"prevArticle":[{"id":9,"title":"面向对象游戏案例：贪吃蛇"}],"nextrAticle":[{"id":11,"title":"Vue3实现多平台文章发布功能，数据保存本地，无后端！基于openwrite插件"}]}}