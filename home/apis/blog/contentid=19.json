{"status":"success","code":200,"data":{"id":19,"title":"C语言-学习总结","desc":"C语言学习总结","content":"``` c\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\nvoid unit_1();\nvoid unit_3();\nvoid unit_4();\n\nvoid unit_1(){\n\tprintf(\"单元一：\\n\"); \n\t/*\n\t数值转化：\n\t二，八，十六-->十进制：\n\t十进制-->二，八，十六：\n\t二进制-->八，十六：\n\t \n\t\n\t*/ \n\t\n\t/*\n\t原码：最高位符合位：0：正，1：负\n\t数值存储：正数原码存储。负数补码存储\n\t补码：除符号位，其他位原码求反+1；\n\t考点：数值溢出问题 \n\t*/\n\tshort int a=32767;\n\ta+=2;\n\tprintf(\"数值溢出：%d\\n\",a);\n\tprintf(\"test:%d\",-32768) ;\n\t/*\n\t-32767\n\t解析：原码：0111 1111 1111 1111\n\t\t\t\t\t\t\t     10\n\t\t    +1：1000 0000 0000 0001\n\t\t符号位为1，为负数，需要按照补码->原码，算出 十进制\n\t\t补码：1000 0000 0000 0001  -1\n\t\t反码：1000 0000 0000 0000   \n\t\t原码：1111 1111 1111 1111 -32767\n\t*/\n}\nvoid unit_3(){\n\t/*\n\t\t易错点：但判断语句遇到：||和&& 满足短路原则。||前满足后 后面不在计算。&&前不满足后边不计算 \n\t*/\n\tint a,b; //定义时不能连续赋值； 除非 int b;int a=b=1;这样可以 \n\ta=b=0;\n\tif(++a||++b){\n\t\tprintf(\"或短路：a=%d,b=%d\\n\",a,b);\n\t}\n\ta=b=0; \n\tif(a--&&b--){\n\t}\n\tprintf(\"与短路：a=%d,b=%d\\n\",a,b);\n\t/*\n\t易错点：switch多分支时\n\t\t case:没有break；时 将会从此处结束到末尾，包括default\n\t\t 但没有匹配到值时，会执行default:但default 不在末尾，且没有break;会从此处运行到末尾； \n\t*/\n\tint ab=1;\n\tswitch(ab){\n\t\tcase 1: printf(\"switch->1\\n\");\n\t\tcase 2: printf(\"2\\n\");\n\t\tdefault: printf(\"default\\n\");\n\t} \n\tswitch(ab){\n\t\tdefault: printf(\"switch->default\\n\");\n\t\tcase 3: printf(\"1\\n\");\n\t\tcase 2: printf(\"2\\n\");\n\t\t\n\t} \n\t/*\n\t\t易错点：if,else if else 没有缩进：记住一个原则：else 只与最近一个if匹配。 \n\t\t++i:前加一后在参与运算,和i++ ：先参与运算后加一。 \n\t\t记住运算优先级 ，编写代码中不确定可以使用（）提高优先级 \n\t*/\n\tint sa=1,sb=0;\n\tsb=sa++*5+sa++;\n\tprintf(\"自增后：运算中出现多个。%d\\n，sa的值：%d\",sb,sa);\n\t//上述可以证明，并不是整个运算结束后自增，而是参与后自增， \n\t\n}\nvoid unit_4(){\n\t/*\n\t\twhile(x):先判断条件：真：执行函数体。\n\t\tdo{}while(x)：至少执行一次函数体：在进行条件判断。\n\t\t上面两种。记得在函数体改变 判断条件。否则可能导致死循环\n\t\tfor(int x；x<y;x++):括号中可以为空，但必须有两个 分号。\n\t\t break:结束本层循环。\n\t\t continue:进行下一次循环。 \n\t*/\n\t/*\n\t\t递归思想：可以拆分出多个事件，并且每个事件的做法相同 \n\t\t条件：要有递归出口 \n\t*/ \n\n\tprintf(\"递归求和：%d\\n\",sum(100));\n} \n//递归求和 \nint sum(x) {\n\tif(x==0){\n\t\treturn 0;\n\t}\n\treturn x+sum(x-1);\n}\n//数组 \nvoid unit_5(){\n\t/*\n\t\t易错点：定义数组后，本能给数组名重新赋值\n\t\t数组名：为数组第一个元素的地址\n\t\t一维数组：在定义时初始化，可以不用指定数组长度\n\t\t二维数组：在定义时初始化，一维长度可以不用指定，二维一定要指定数组长度 \n\t\t当数组作为函数参数传入,在函数中修改值，原数组会被修改。因为数组名就是地址。不是值传递 \n\t*/ \n\tint a[]={1,2,3};\n\tahcddd(a);\n\tprintf(\"数组传入:%d\\n\",a[0]);\n\t/*\n\t\t易考点：字符串函数\n\t\t字符串连接：strcat(数组1，数组2)；把数组2连接到数组1，并删除数组1 最后\\0 \n\t\t字符串拷贝：strcpy(数组1，数组2)；把数组2赋值到数组1中，\n\t\t字符串比较：strcmp(s数组1，数组2)；相等0，1>2 >0 1<0 <0 前大即正，前小即负，相等即0\n\t\t字符串长度：strlen(数组)，不包括\\0\n\t\t字符串大写：strlwr() \n\t\t符串大写：strupr() \n\t\n\t*/ \n\tchar sa[]=\"A\",sb[]=\"b\";\n\tprintf(\"字符串连接：%s\\n\",strcat(sa,sb));\n\tprintf(\"字符串拷贝：%s\\n\",strcpy(sa,sb));\n\tprintf(\"字符串比较：%d\\n\",strcmp(sa,sb));\n\tprintf(\"字符串长度:%d\\n\",strlen(sa));\n\tprintf(\"字符串大写：%s\\n\",strlwr(sb));\n\tprintf(\"符串大写：%s\\n\",strupr(sb));\n} \nvoid ahcddd(int a[]){\n\ta[0]=1000;\n}\n//函数 \nvoid unit_6(){\n\t/*\n\t\t存储方式\n\t\tauto:动态分配空间\n\t\tstatic:静态存储空间，在函数中使用，运行结束后。不消失，下次调用还是此空间的值\n\t\t\n\t\textern:声明外部变量，扩展外部变量作用域。\n\t\t \n\t\n\t\n\t*/ \n\t\n} \nvoid unit_7(){\n\t\n\t\n} \n//union\n//enum\n//typedef\n//struct\n//malloc\n\nvoid main(){\n\tprintf(\"开始复习！\\n\"); \n//\tunit_1();\n//\tunit_3();\n//\tunit_4();\n    unit_5();\n}\n\n\n```","img":"https://bit-images.bj.bcebos.com/bit-new/file/20210319/3c2j.jpg","classty":"后端","channels":null,"name":"Baymax","click":1,"like":1,"is_show":1,"head_show":1,"share_show":1,"copyright_show":1,"message_show":1,"deleted_at":1,"created_at":"2021-03-19T13:44:48.000000Z","updated_at":"2021-04-18T09:50:13.000000Z","label":["C"],"view_count":1,"prevArticle":[{"id":18,"title":"小程序-回退旧版本！"}],"nextrAticle":[{"id":20,"title":"C语言-基本算法总结"}]}}